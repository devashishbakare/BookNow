const express = require("express");
const router = express.Router();
const authenticate = require("../config/authMiddleware");
const paymentController = require("../controller/paymentController");

/**
 * @swagger
 * /payment/createBooking:
 *   post:
 *     summary: Create a new booking
 *     tags: [Payment]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               amount:
 *                 type: number
 *                 format: float
 *                 description: The amount for the booking in INR
 *               roomPackageId:
 *                 type: string
 *                 description: The ID of the room package being booked
 *             required:
 *               - amount
 *               - roomPackageId
 *     responses:
 *       200:
 *         description: Booking created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   description: Booking details from Razorpay
 *                   additionalProperties: true
 *       400:
 *         description: Invalid request or tampered amount
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *       500:
 *         description: Internal server error while creating the booking
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 */

router.post("/createBooking", authenticate, paymentController.createBooking);

/**
 * @swagger
 * /payment/verify:
 *   post:
 *     summary: Verify a payment
 *     tags: [Payment]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               booking_id:
 *                 type: string
 *                 description: The ID of the booking
 *               razorpay_payment_id:
 *                 type: string
 *                 description: The payment ID provided by Razorpay
 *               razorpay_signature:
 *                 type: string
 *                 description: The signature generated by Razorpay for verification
 *             required:
 *               - booking_id
 *               - razorpay_payment_id
 *               - razorpay_signature
 *     responses:
 *       200:
 *         description: Payment verified successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Success message indicating payment verification
 *       500:
 *         description: Payment verification failed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message indicating payment verification failure
 */

router.post("/verify", paymentController.verifyBooking);

module.exports = router;
